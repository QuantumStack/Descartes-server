FORMAT: 1A
HOST: https://descartes-api.quantumstack.xyz/

# Descartes

I think, therefore I am. [Open-source](https://github.com/quantumstack/descartes), educational web application.

<div align="right"><sup>
  made with ❤️ in Pittsburgh, PA by <a href="https://quantumstack.xyz">QuantumStack</a>
</sup></div>

## Authorization Collection [/auth]

This API uses OAuth v2 bearer Token / Personal Access Token for its Authorization.

### Login [POST /auth/login]

Login to an existing user account. Note that the responses for an incorrect email or incorrect password are identical.

+ Request 200 Valid Login (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password"
            }
            
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "You have successfully logged in.",
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjI0LCJpYXQiOjE1NTg2MzI2NTN9.gpRK6QPQpPkHJ7iOjFuL7mvaghJFdQJNnCRuDimlaKM",
        }


+ Request 400 Email Not Provided (application/json)
    + Body

            {
                "password": "example_password"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-email",
            "message": "Please provide an email address."
        }
        

+ Request 400 Password Not Provided (application/json)
    + Body

            {
                "password": "example_password"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-password",
            "message": "Please provide a password."
        }
        

+ Request 400 Incorrect Email (application/json)
    + Body

            {
                "email": "nonexistent-user@example.com",
                "password": "example_password"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "incorrect-credentials",
            "message": "Incorrect email or password."
        }

+ Request 400 Incorrect Password (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "incorrect_password"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "incorrect-credentials",
            "message": "Incorrect email or password."
        }

+ Request 400 Unverified Email (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "unverified-email",
            "message": "Please verify your email address before logging in."
        }

### Signup [POST /auth/signup]

Create a new user.

+ Request 200 Valid Signup (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "firstName": "Aditya",
                "lastName": "Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "You have successfully created an account."
        }
    
+ Request 400 reCAPTCHA Token Not Provided (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "firstName": "Aditya",
                "lastName": "Pillai"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-recaptcha",
            "message": "The reCAPTCHA verification failed, please try again."
        }

+ Request 400 Invalid reCAPTCHA Token (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "firstName": "Aditya",
                "lastName": "Pillai"
                "g-recaptcha-response": "invalid-recaptcha-token"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-recaptcha",
            "message": "The reCAPTCHA verification failed, please try again."
        }

+ Request 409 User Account Already Exists (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "firstName": "Aditya",
                "lastName": "Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
        
+ Response 409 (application/json; charset=utf-)

        {
            "success": false,
            "error": "user-already-exists",
            "message": "A user with this email address already exists."
        }


+ Request 400 Password Too Short (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "short",
                "firstName": "Aditya",
                "lastName": "Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "password-too-short",
            "message": "Please provide a password of length 8+."
        }
        
+ Request 400 Email Not Provided (application/json)
    + Body

            {
                "password": "example_password",
                "firstName": "Aditya",
                "lastName": "Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-email",
            "message": "Please provide your email.",

        }

+ Request 400 Password Not Provided (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "firstName": "Aditya",
                "lastName": "Pillai",
                "g-recaptcha-response": "recaptcha-token"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-password",
            "message": "Please provide a password"
        }

+ Request 400 Name Not Provided (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "password": "example_password",
                "g-recaptcha-response": "recaptcha-token"
            }
            

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-name",
            "message": "Please provide your name."
        }

### Email Verification [POST /auth/verify]

Verify an email address given a confirmation code and email address. Note that the responses for an incorrect email or confirmation ID are both the same.

+ Request 200 Valid Email Confirmation (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }
            
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "Your email has been successfully verified."
        }

+ Request 400 Invalid Email Confirmation (application/json)
    + Body

            {
                "email": "invalid-email@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-email-confirmation",
            "message": "Your email has not been verified."
        }

+ Request 400 Invalid Confirmation ID (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-email-confirmation",
            "message": "Your email has not been verified."
        }
        
+ Request 400 Email Already Verified (application/json)
    + Body

            {
                "email": "aditya@example.com",
                "confirmationId": "uK_5G4d84FyhASl.nwjbDdLryV8pTGFfDRBwA5re~VmFwGl_ePiT-Nc5YqCf5JPq"
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-email-confirmation",
            "message": "Your email has already been verified!',
        }

### Resend Email Confirmation [POST /auth/resend]

Request to resend another email confirmation. 


+ Request 200 Valid Email Confirmation Resend (application/json)
    + Body

            {
                "email": "aditya@example.com"
            }
        
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "Another confirmation email has been successfully sent."
        }

+ Request 400 Requesting Verification Too Quickly (application/json)
    + Body

            {
                "email": "aditya@example.com"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "email-verification-too-quickly",
            "message": "You have already requested an email verification recently."
        }


+ Request 400 Email Already Verified (application/json)
    + Body

            {
                "email": "already-verified@example.com"
            }
        
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "email-already-verified",
            "message": "This email has already been verified."
        }
        
        
+ Request 400 Invalid Email Confirmation Resend (application/json)

    + Body

            {
                "email": "non-existent@example.com"
            }
        

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "non-existent-email",
            "message": "An account with this email address does not exist, try signing up first."
        }

### Authentication Verification [GET /api/]

+ Request 200 Authentication Verified (application/json)
    + Headers

            Authorization: bearer JWT
            
+ Response 200

        {
            "success": true
        }
        
+ Request 401 Unauthorized No Token (application/json)
    + Headers
    
            Authorization: bearer invalid_jwt

+ Response 401



+ Request 401 Unauthorized Invalid Token (application/json)
    + Headers
    
            Authorization: bearer invalid_jwt

+ Response 401


## Open Collection [/open]

This collection is unauthenticated information that may be necessary to the client.

### Get All Course Plans [GET /open/plans]

+ Request 200 OK (application/json)

+ Response 200

        {
            "success": true,
            "coursePlans": [
                {
                    "uuid": "f0a00239-6c23-4052-9937-4ec22b467a00",
                    "plan_name": "standard",
                    "price": "200",
                    "length_in_days": 185
                }
            ]
        }


## Course Collection [/api/course]

This collection is entirely authorized via a bearer JWT. All requests must use a JWT, otherwise a `401 Unauthorized` error will be sent.

### (Admin) Add Coupon [POST /api/course/create/coupon/admin]

+ Request 200 Created Coupon (application/json)
    + Headers

            Authorization: bearer JWT
    
    + Body

            {
                "code": "qstk",
                "plan": 0,
                "price": 15
            }
            
+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }


### (Admin) List Coupons [GET /api/course/create/coupon/admin]

+ Request 200 List Coupons (application/json)
    + Headers

            Authorization: bearer JWT
            
+ Response 200

        {
            {
                "uuid": "1df1-ssva-A3f0-abw3",
                "code": "qstk",
                "plan": "std",
                "price": 15
            },
            ...
        }

### Check Coupon [GET /api/course/create/coupon{?code}]

Determine if a coupon is valid and effect it has.

+ Request 200 Valid Coupon (application/json)
    + Headers

            Authorization: bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "verified": true,
            "plan": "standard",
            "adjustedPrice": 0
        }
        
+ Request 400 Coupon Not Provided (application/json)
    + Headers

            Authorization: bearer JWT
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-coupon",
            "message": "Please provide a coupon code."
        }

+ Request 404 Invalid or Expired Coupon Code (application/json)
    + Headers
        
            Authorization: bearer JWT

+ Response 404 (application/json; charset=utf-8)

        {
            "success": false,
            "verified": false
        }

### Create Course [POST /api/course/create]

Redirect to Stripe for Checkout session or includes `isFree: true` to skip checkout with Stripe.

+ Request 200 Payment Portal Skipped with Coupon Code (application/json)
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "name": "15-122: Principles of Imperative Computation - Fall 2019",
                "description": "An introduction to imperative programming.",
                "plan": 0,
                "price": 200,
                "coupon": "discount_code"
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "isFree": true
        }
        
+ Request 200 Payment Portal Skipped as Administrator (application/json)
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "name": "15-122: Principles of Imperative Computation - Fall 2019",
                "description": "An introduction to imperative programming.",
                "plan": 0,
                "price": 200
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "isFree": true
        }
        
+ Request 200 Redirect to Stripe (application/json)
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "name": "15-150: Principles of Functional Programming - Fall 2019",
                "description": "An introduction to bad programming.",
                "plan": 0,
                "price": 200
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "isFree": false,
            "stripeId": "stripe_id"
        }
        
+ Request 400 Course Name Not Provided
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "description": "An introduction to bad programming.",
                "plan": 0,
                "price": 200
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-course-name",
            "message": "Please provide a course name."
        }

+ Request 400 Description Not Provided
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "name": "15-150: Principles of Functional Programming - Fall 2019",
                "plan": 0,
                "price": 200
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-description",
            "message": "Please provide a course description."
        }

+ Request 400 Plan Not Provided (application/json)
    + Headers
        
            Authorization: bearer JWT

    + Body

            {
                "name": "15-122: Principles of Imperative Computation - Fall 2019",
                "description": "An introduction to imperative programming.",
                "price": 200,
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "no-description",
            "message": "Please provide a course description."
        }

+ Request 400 Invalid Plan Selected (application/json)
    + Headers

            Authorization: bearer JWT
            
    + Body

            {
                "name": "15-122: Principles of Imperative Computation - Fall 2019",
                "description": "An introduction to imperative programming.",
                "price": 200,
                "plan": -15,
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-plan",
            "message": "Please select a valid course plan.",
        }
        

+ Request 400 Invalid or Expired Coupon Code (application/json)
    + Headers
        
            Authorization: bearer JWT
            
    + Body

            {
                "name": "15-151: Mathematical Foundations for Computer Science - Fall 2019",
                "description": "Great course, greater instructor.",
                "plan": "lit",
                "price": 50,
                "coupon": "invalid_coupon"
            }
            
+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "invalid-coupon",
            "message": "The coupon code entered is not valid.",
        }
        
+ Request 400 Price Mismatch (application/json)
    + Headers
            
            Authorization: bearer JWT
    
    + Body

            {
                "name": "15-151: Mathematical Foundations for Computer Science - Fall 2019",
                "description": "Great course, greater instructor.",
                "plan": "lit",
                "price": 100000000
            }

+ Response 400 (application/json; charset=utf-8)

        {
            "success": false,
            "error": "price-mismatch"
            "message": "There was an issue with the price of the course."
        }


### Enroll In Course [POST /api/course/enroll]

Join a course a student.

+ Request (application/json)
    + Headers

            Authorization: bearer JWT

    + Body

            {
                "code": "course code given to students"
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "id": "descartes course id"
        }

### Dashboard Overview [GET /api/course/overview]

Get details about a user's courses.

+ Request (application/json)
    + Headers

            Authorization: bearer JWT
            
+ Response 200 (application/json; charset=utf-8)

        {
            "instructorCourses": [
                {
                    "id": "379",
                    "role": "admin",
                    "name": "15-112: Fall 2019",
                    "numInstructors": 10,
                    "numStudents": 500,
                    "numActivities": 5,
                    "numPolls": 10,
                    "oh": true,
                    "expired": false
                }
            ],
            "studentCourses": [
                {
                    "id": "761",
                    "name": "15-122: Summer 2019",
                    "head": {
                        "email": "albert@smart.com",
                        "name": "Albert Einstein"
                    },
                    "grade": 100,
                    "numActivities": 5,
                    "numPolls": 10,
                    "oh": true,
                    "expired": false
                }
            ]
        }
        
### Instructor Course Details [GET /api/course/instructor{?id}]

Get all details about a course from an instructor's perspective.

+ Parameters
    + id - course ID

+ Request (application/json)
    + Headers
    
            Authorization: bearer JWT
    
+ Response 200 (application/json; charset=utf-8)

        {
            "course": {
                "id": "379",
                "role": "admin",
                "name": "15-112: Fall 2019",
                "numInstructors": 10,
                "numStudents": 500,
                "numActivities": 5,
                "numPolls": 10,
                "oh": true,
                "expired": false
            }
        }
        

### Student Course Details [GET /api/course/student{?id}]

Get all details about a course from a student's perspective. Notes:
    - Overall and assignment grade percent is calculated automatically except when an `override` is specified.
    - Course admins specify categories for activity and poll data. These categories can also include activities of type `custom`.
    - `activity` and `poll` assignments may have an additional flags field.

+ Parameters
    + id - course ID

+ Request (application/json)
    + Headers

            Authorization: bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
            "course": {
                "id": "761",
                "name": "15-122: Fall 2019",
                "description": "### Hello\n**Welcome** to this course!",
                "head": {
                    "email": "albert@smart.com",
                    "name": "Albert Einstein"
                },
                "contact": "teacher@course.com",
                "instructors": [
                    {
                        "email": "albert@smart.com",
                        "showEmail": true,
                        "name": "Albert Einstein",
                        "role": "admin"
                    },
                    {
                        "email": "ashwin@fishdev.xyz",
                        "showEmail": true,
                        "name": "Ashwin Srinivasan",
                        "role": "instructor"
                    }
                ],
                "oh": true,
                "expired": false,
                "section": "A",
                "grade": 100,
                "numActivities": 5,
                "numPolls": 10,
                "assignments": [
                    {
                        "id": "1",
                        "name":  "Midterm 1",
                        "description": "This one was **hard**",
                        "type": "custom",
                        "score": 95,
                        "outOf": 100,
                        "override": 97,
                        "category":  "1",
                        "stats": {
                            "mean": 97,
                            "q1": 76,
                            "med": 85,
                            "q3": 92,
                            "min": 3,
                            "max": 105
                        },
                        "date": 1558885206658
                    },
                    {
                        "id": "2",
                        "name": "Homework 1",
                        "type": "custom",
                        "score": 25,
                        "outOf": 25,
                        "category": "3",
                        "date": 1558885258178
                    },
                    {
                        "id": "3",
                        "name": "Homework 2",
                        "description": "Unnecessary text",
                        "type": "custom",
                        "outOf": 25,
                        "category": "3",
                        "date": 1558885258178
                    },
                    {
                        "id": "42",
                        "name": "Lab 1",
                        "type": "activity",
                        "activity": "id of activity",
                        "flags": [
                            {
                                "type": "section"
                            }
                        ],
                        "score": 3,
                        "outOf": 3,
                        "category": "hola",
                        "date": 1558886442796
                    },
                    {
                        "id": "67",
                        "name": "Poll 1",
                        "description": "Really *simple, easy* to start class",
                        "type": "poll",
                        "poll": "id of poll",
                        "score": 5,
                        "outOf": 5,
                        "category": "p2",
                        "stats": {
                            "mean": 96.7,
                            "q1": 50,
                            "med": 100,
                            "q3": 100,
                            "min": 0,
                            "max": 100
                        },
                        "date": 1558886493794
                    }
                ],
                "categories":  [
                    {
                        "name": "Exams",
                        "id": "1",
                        "description": "*You'll  do great*",
                        "weight": 0
                    },
                    {
                        "name": "Homeworks",
                        "id": "3",
                        "description": "*Lots of fun*",
                        "weight": 50
                    },
                    {
                        "name": "Labs",
                        "id": "hola",
                        "description": "Labs  are  *easy*",
                        "activities": true,
                        "weight": 25
                    },
                    {
                        "name": "Polls",
                        "id": "p2",
                        "description": "Check your **attendance**",
                        "polls": true,
                        "weight": 25
                    }
                ],
                "options": {
                    "allowTestingScores": true,
                    "allowTestingAssignments": true
                }
            }
        }

## Account Collection [/api/account]

### Account Overview [GET /api/account]

Get just the details about a user.

+ Request (application/json)
    + Headers

            Authorization: bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
            "user": {
                "firstName": "Aditya",
                "lastName": "Pillai",
                "email": "aditya@example.com",
                "showEmail": true
            },
            "payments": [
                {
                    "name": "15-122: Fall 2019",
                    "id": "course id",
                    "plan": 0,
                    "date": 1558849250238
                }
            ]
        }

### Change Account Details [POST /api/account/modify]

Modify a user's name and/or password.

+ Request (application/json)
    + Headers (application/json)

        Authorization: bearer JWT

    + Body

            {
                "firstName": "Ashwin",
                "lastName": "Srinivasan",
                "oldPassword": "example_password",
                "password": "super_secure"
            }

+ Response 200 (text/plain; charset=utf-8)

        User details changed.n